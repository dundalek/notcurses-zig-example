;; -*- clojure -*-
(const std (@import "std"))
(const nc (@import "notcurses.zig"))
(const time (@import "time.zig"))

(const ^usize BOX_NUM 10)

(const ^u32 c_red 0xd72c2f)
(const ^u32 c_yel 0xffd029)
(const ^u32 c_blu 0x3c497f)
(const ^u32 c_whi 0xfefefe)

(const box_colors
  ^"[BOX_NUM]u32"
  [c_red
   c_whi
   c_yel
   c_whi
   c_blu
   c_whi
   c_blu
   c_yel
   c_red
   c_whi])

(defn- ^"@TypeOf(start)" linear_transition [^anytype start ^anytype end ^u64 duration ^u64 diff]
  (return (+ start
             (@intCast (@TypeOf start)
                       (@divTrunc (* (- end start)
                                     (@intCast i64 diff))
                                  (@intCast i64 duration))))))

(defn- ^u32 transition_rgb [^u32 start ^u32 end ^u64 duration ^u64 diff]
  (var ^u32 rgb 0)
  (var r (linear_transition (@intCast c_int (nc.channel_r start)) (@intCast c_int (nc.channel_r end)) duration diff))
  (var g (linear_transition (@intCast c_int (nc.channel_g start)) (@intCast c_int (nc.channel_g end)) duration diff))
  (var b (linear_transition (@intCast c_int (nc.channel_b start)) (@intCast c_int (nc.channel_b end)) duration diff))
  (nc.channel_set_rgb8_clipped &rgb r g b)
  (return rgb))

(defn- ^"[4]c_int" transition_box [^"[4]c_int" start ^"[4]c_int" end ^u64 duration ^u64 diff]
  (var ^"[4]c_int" coords undefined)
  (dotimes [i coords.len]
    (aset coords i (linear_transition (aget start i) (aget end i) duration diff)))
  (return coords))

(defn- ^"[BOX_NUM][4]c_int" make_boxes_start [^anytype dimy ^anytype dimx]
  (var ^"[BOX_NUM][4]c_int" bs undefined)
  (dotimes [i bs.len]
    (var ^c_int y -1)
    (var ^c_int x (@divTrunc dimx 2))
    (aset bs i 0 y)
    (aset bs i 1 x)
    (aset bs i 2 (+ y 2))
    (aset bs i 3 (+ x 4)))
  (return bs))

(defn- ^"[BOX_NUM][4]c_int" make_boxes_bottom_out [^anytype dimy ^anytype dimx]
  (var ^"[BOX_NUM][4]c_int" bs undefined)
  (dotimes [i bs.len]
    (var ^c_int y (+ dimy 4))
    (var ^c_int x (@divTrunc dimx 2))
    (aset bs i 0 y)
    (aset bs i 1 x)
    (aset bs i 2 (+ y 2))
    (aset bs i 3 (+ x 4)))
  (return bs))

(defn- ^"[BOX_NUM][4]c_int" make_boxes_arranged [^anytype dimy ^anytype dimx]
  (var ^c_int x0 2)
  (var x1 (-> dimx (* 40) (@divFloor 100)))
  (var x2 (-> dimx (* 55) (@divFloor 100)))
  (var x3 (-> dimx (* 85) (@divFloor 100)))
  ; (var x4 (dec dimx))
  (var x4 dimx)

  (var ^c_int y0 1)
  (var y1 (-> dimy (* 18) (@divFloor 100)))
  (var y2 (-> dimy (* 22) (@divFloor 100)))
  (var y3 (-> dimy (* 35) (@divFloor 100)))
  (var y4 (-> dimy (* 55) (@divFloor 100)))
  (var y5 (-> dimy (* 70) (@divFloor 100)))
  ; (var y6 (dec dimy))
  (var y6 dimy)

  (var bs
    ^"[BOX_NUM][4]c_int"
    [[y0 x0 y5 x1]
     [y5 x0 y6 x1]
     [y0 x1 y2 x2]
     [y2 x1 y5 x2]
     [y5 x1 y6 x2]
     [y0 x2 y3 x3]
     [y3 x2 y4 x3]
     [y4 x2 y6 x4]
     [y0 x3 y1 x4]
     [y1 x3 y4 x4]])
  (return bs))

(defn- ^"[BOX_NUM][4]c_int" make_boxes_grid [^anytype dimy ^anytype dimx]
  (const ^c_int boxh (@divTrunc dimy 5))
  (const ^c_int boxw (* boxh 2))
  (var y0 (-> dimy (* 20) (@divFloor 100)))
  (var x0 (-> dimx (* 20) (@divFloor 100)))
  (var ^"[BOX_NUM][4]c_int" bs undefined)
  (dotimes [i bs.len]
    (const ^c_int row (@divFloor (@intCast c_int i) 5))
    ;; FIXME Liz bug with @mod
    (const ^c_int col (zig* "@mod(@intCast(c_int, i), 5)"))
    (const shifted (zero? (zig* "@mod(col, 2)")))
    (const y (+ y0
                (* row (+ boxh (@divTrunc boxh 2)))
                (if shifted (+ (@divTrunc boxh 2) 1) 0)))
    (const x (+ x0
                (* col (+ boxw 2))))
    (aset bs i 0 y)
    (aset bs i 1 x)
    (aset bs i 2 (+ y boxh))
    (aset bs i 3 (+ x boxw)))
  (return bs))

(defn- ^c_int box_ylen [^"[4]c_int" box]
  (return (- (aget box 2) (aget box 0) 1)))

(defn- ^c_int box_xlen [^"[4]c_int" box]
  (return (- (aget box 3) (aget box 1) 2)))

(defn- ^void make_box_planes [^*nc.ncplane n ^"[] *nc.ncplane" planes]
  (dotimes [i planes.len]
    (var opts nc.default_ncplane_options)
    (set! (.-rows opts) 1)
    (set! (.-cols opts) 1)
    (const plane (nc.ncplane_create n &opts))
    (aset planes i plane.?)))

(defn- ^!void draw_boxes_colored [^"[BOX_NUM] *nc.ncplane" planes]
  (dotimes [i planes.len]
    (var ^u64 chans 0)
    (try (nc.err (nc.channels_set_bg_rgb &chans (aget box_colors i))))
    (const plane (aget planes i))
    (try (nc.err (nc.ncplane_set_base plane " " 0 chans)))
    (nc.ncplane_erase plane)))

(defn- ^!void draw_boxes_gradients [^"[BOX_NUM] *nc.ncplane" planes]
  (dotimes [i planes.len]
    (const plane (aget planes i))
    (const ^u32 ur (bit-or 0xffffff nc.CELL_BGDEFAULT_MASK))
    (const ^u32 ul (bit-or (aget box_colors i) (@intCast u32 nc.CELL_BGDEFAULT_MASK)))
    (const ^u32 lr (bit-or (aget box_colors i) (@intCast u32 nc.CELL_BGDEFAULT_MASK)))
    (const ^u32 ll (bit-or 0x000000 nc.CELL_BGDEFAULT_MASK))
    (try (nc.err (nc.ncplane_highgradient plane ul ur ll lr (dec (nc.ncplane_dim_y plane)) (dec (nc.ncplane_dim_x plane)))))))

(defn- ^!void draw_boxes_bordered [^"[BOX_NUM] *nc.ncplane" planes]
  (dotimes [i planes.len]
    (var plane (aget planes i))
    (nc.ncplane_erase plane)
    (try (nc.err (nc.ncplane_cursor_move_yx plane 0 0)))
    ;; Ignoring error (e.g. the dimensions are too small), when the box fits it will be re-drawn in future frames
    (set! _ (nc.ncplane_rounded_box plane 0 0 (dec (nc.ncplane_dim_y plane)) (dec (nc.ncplane_dim_x plane)) 0))))

(defn- ^!void reposition_plane [^*nc.ncplane plane ^"[4]c_int" box]
  (try (nc.err (nc.ncplane_move_yx plane (aget box 0) (aget box 1))))
  (try (nc.err (nc.ncplane_resize_simple plane (box_ylen box) (box_xlen box)))))

(defn- ^!void reposition_planes [^"[BOX_NUM] *nc.ncplane" planes ^"[BOX_NUM][4]c_int" boxes]
  (dotimes [i planes.len]
    (try (reposition_plane (aget planes i) (aget boxes i)))))

(defn- ^!*nc.ncplane make_message_box [^*nc.ncplane parent ^c_int windowy ^c_int windowx]
  (const l1 "Notcurses by Nick Black et al")
  (const l2 "Zig lang by Andrew Kelley & community")
  (const l3 "Liz lang & demo by Jakub Dundalek")
  (const l4 "Press q to quit")

  (var opts nc.default_ncplane_options)
  (set! (.-rows opts) (+ 5 2))
  (set! (.-cols opts) (-> l2 .-len (+ 4)))
  (set! (.-x opts) 4)
  (set! (.-y opts) (- windowy (.-rows opts) 2))
  (const plane (.-? (nc.ncplane_create parent &opts)))

  (var ^u64 chans 0)
  (try (nc.err (nc.channels_set_bg_rgb &chans 0x000000)))
  (try (nc.err (nc.channels_set_bg_alpha &chans nc.CELL_ALPHA_BLEND)))
  (try (nc.err (nc.ncplane_set_base plane " " 0 chans)))

  (var ^u64 border_chans 0)
  (try (nc.err (nc.channels_set_fg_rgb &border_chans c_red)))
  (set! _ (nc.ncplane_rounded_box plane 0 border_chans (dec (nc.ncplane_dim_y plane)) (dec (nc.ncplane_dim_x plane)) 0))

  (try (nc.err (nc.ncplane_putstr_yx plane 1 2 l1)))
  (try (nc.err (nc.ncplane_putstr_yx plane 2 2 l2)))
  (try (nc.err (nc.ncplane_putstr_yx plane 3 2 l3)))
  (try (nc.err (nc.ncplane_putstr_yx plane 5 2 l4)))

  (return plane))

(var ^"[BOX_NUM] *nc.ncplane" box_planes undefined)
(var ^"[BOX_NUM][4]c_int" boxes_start undefined)
(var ^"[BOX_NUM][4]c_int" boxes_bottom_out undefined)
(var ^"[BOX_NUM][4]c_int" boxes_grid undefined)
(var ^"[BOX_NUM][4]c_int" boxes_arranged undefined)
(var ^*nc.ncplane message_box undefined)

(const ^u64 step_ns (/ time.NANOSECS_IN_SEC 60))

(const PositionContext
  (struct ^c_int from
          ^c_int to))

(defn- ^!void run_transition [^*nc.notcurses ncs ^u64 duration ^anytype ctx ^"fn(@TypeOf(ctx), u64, u64) nc.Error!void" render]
  (var ^u64 time_start (time.get_time_ns))
  (var ^u64 t time_start)
  (while-step (< t (+ time_start duration)) (set! t (time.get_time_ns))
    (try (render ctx (- t time_start) duration))
    (try (nc.err (nc.notcurses_render ncs)))
    (time.sleep_until_ns (+ t step_ns)))
  (try (render ctx duration duration))
  (try (nc.err (nc.notcurses_render ncs))))

(defn- ^!void run_serial_transition [^*nc.notcurses ncs ^u64 duration ^"fn(usize, u64, u64) nc.Error!void" render]
  (dotimes [i BOX_NUM]
    (try (run_transition ncs duration i render))))

(defn ^!void main []
  (var ^nc.notcurses_options nc_opts nc.default_notcurses_options)
  ; (set! (.-flags nc_opts) nc.NCOPTION_SUPPRESS_BANNERS)
  ; (set! (.-loglevel nc_opts) nc.ncloglevel_e.NCLOGLEVEL_ERROR)
  (var ^*nc.notcurses ncs (-> (nc.notcurses_core_init &nc_opts nil)
                              (orelse (@panic "notcurses_core_init() failed"))))
  (defer (set! _ (nc.notcurses_stop ncs)))

  (var ^c_int dimy undefined)
  (var ^c_int dimx undefined)
  (var ^*nc.ncplane n (-> (nc.notcurses_stddim_yx ncs &dimy &dimx)
                          (orelse (unreachable))))
  (set! dimx (std.math.max dimx 80))
  (set! dimy (std.math.max dimy 25))
  (var ^u64 std_chan 0)
  (try (nc.err (nc.channels_set_bg_rgb &std_chan 0x000000)))
  (try (nc.err (nc.ncplane_set_base n " " 0 std_chan)))

  (make_box_planes n &box_planes)
  (set! boxes_start (make_boxes_start dimy dimx))
  (set! boxes_bottom_out (make_boxes_bottom_out dimy dimx))
  (set! boxes_grid (make_boxes_grid dimy dimx))
  (set! boxes_arranged (make_boxes_arranged dimy dimx))

  ; (try (run_serial_transition ncs render_slidein_step 300e6))

  (try (run_serial_transition ncs 300e6
         (-> (fn ^nc.Error!void render[^usize i ^u64 diff ^u64 duration]
              (try (reposition_plane (aget box_planes i) (transition_box (aget boxes_start i) (aget boxes_grid i) duration diff)))
              (try (draw_boxes_bordered box_planes)))
             struct .-render)))

  (try (run_transition ncs 1000e6 {}
         (-> (fn ^nc.Error!void render [^void ctx ^u64 diff ^u64 duration]
              (dotimes [i box_planes.len]
                (try (reposition_plane (aget box_planes i) (transition_box (aget boxes_grid i) (aget boxes_arranged i) duration diff))))
              (try (draw_boxes_bordered box_planes)))
             struct .-render)))

  (try (run_serial_transition ncs 150e6
         (-> (fn ^nc.Error!void render [^usize i ^u64 diff ^u64 duration]
              (const plane (aget box_planes i))
              (var ^u64 chans 0)
              (set! _ (nc.channels_set_bchannel &chans (transition_rgb 0x333333 0x000000 duration diff)))
              (set! _ (nc.channels_set_fchannel &chans (transition_rgb 0xF2F2F2 0x000000 duration diff)))
              (try (nc.err (nc.ncplane_set_base plane " " 0 chans)))
              (try (draw_boxes_bordered box_planes)))
             struct .-render)))

  (try (run_serial_transition ncs 150e6
         (-> (fn ^nc.Error!void render [^usize i ^u64 diff ^u64 duration]
              (const plane (aget box_planes i))
              (var ^u64 chans 0)
              (set! _ (nc.channels_set_bchannel &chans (transition_rgb 0x000000 (aget box_colors i) duration diff)))
              (try (nc.err (nc.ncplane_set_base plane " " 0 chans)))
              (nc.ncplane_erase plane))
             struct .-render)))

  (try (run_serial_transition ncs 150e6
         (-> (fn ^nc.Error!void render [^usize i ^u64 diff ^u64 duration]
              (const plane (aget box_planes i))
              (const ^u32 ur (bit-or (transition_rgb (aget box_colors i) 0xffffff duration diff) (@intCast u32 nc.CELL_BGDEFAULT_MASK)))
              (const ^u32 ul (bit-or (aget box_colors i) (@intCast u32 nc.CELL_BGDEFAULT_MASK)))
              (const ^u32 lr (bit-or (aget box_colors i) (@intCast u32 nc.CELL_BGDEFAULT_MASK)))
              (const ^u32 ll (bit-or (transition_rgb (aget box_colors i) 0x000000 duration diff) (@intCast u32 nc.CELL_BGDEFAULT_MASK)))
              (try (nc.err (nc.ncplane_highgradient plane ul ur ll lr (dec (nc.ncplane_dim_y plane)) (dec (nc.ncplane_dim_x plane))))))
            struct .-render)))

  ; (try (reposition_planes box_planes boxes_arranged))
  ; (try (draw_boxes_gradients box_planes))
  ; (try (nc.err (nc.notcurses_render ncs)))

  (set! message_box (try (make_message_box n dimy dimx)))
  (try (run_transition ncs 300e6
                       ^PositionContext{:from (- (nc.ncplane_dim_x message_box))
                                        :to (nc.ncplane_x message_box)}
                       (-> (fn ^nc.Error!void render [^PositionContext ctx ^u64 diff ^u64 duration]
                            (const ^c_int x (linear_transition (.-from ctx) (.-to ctx) duration diff))
                            (try (nc.err (nc.ncplane_move_yx message_box (nc.ncplane_y message_box) x))))
                           struct .-render)))

  ; (set! _ (nc.notcurses_getc_blocking ncs nil))

  (block :outer
    (var ^usize loop 0)
    (while-step true (inc! loop)
      (var ^u64 duration 1000e6)
      (var ^u64 time_start (time.get_time_ns))
      (var ^u64 t time_start)
      (while-step (< t (+ time_start duration)) (set! t (time.get_time_ns))
        (dotimes [i box_planes.len]
          (var plane (aget box_planes i))
          (var i_next (mod (inc i) BOX_NUM))
          (const colors ^"[4]u32"
                 [(aget box_colors i)
                  0xffffff
                  (aget box_colors i)
                  0x000000])
          (var ^"[4]u32" corners undefined)
          (dotimes [j 4]
            (aset corners j (bit-or (@intCast u32 nc.CELL_BGDEFAULT_MASK)
                                    (transition_rgb (aget colors (mod (+ loop j) 4))
                                                    (aget colors (mod (+ j loop 1) 4))
                                                    duration
                                                    (- t time_start)))))
          (try (nc.err (nc.ncplane_highgradient plane
                                                (aget corners 0)
                                                (aget corners 1)
                                                (aget corners 3)
                                                (aget corners 2)
                                                (dec (nc.ncplane_dim_y plane))
                                                (dec (nc.ncplane_dim_x plane))))))
        (try (nc.err (nc.notcurses_render ncs)))
        (time.sleep_until_ns (+ t step_ns))

        (var ^c_uint keypress (nc.notcurses_getc_nblock ncs nil))
        (when (= keypress \q)
          (break :outer))))))
